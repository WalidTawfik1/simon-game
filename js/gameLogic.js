import { getCurrentMode } from "./modes.js";
import { updateScore, updateHighScore, updateLevel, showGameOver, toggleUIBasedOnMode } from "./ui.js";

// Define the colors used in the game
const colors = ["red", "blue", "green", "yellow", "white", "purple", "orange", "pink", "cyan"];
let gameSequence = []; // Stores the sequence of colors generated by the game
let userSequence = []; // Stores the user's input sequence
let score = 0; // User's score
let level = 1; // Current level
let levelLimit = 5; // Maximum level for the game
let started = false; // Indicates if the game has started
let sequencePlaying = false; // Indicates if the sequence is currently being played

// Function to start the game
export function startGame() {
    console.log("Game starting...");
    gameSequence = [];
    userSequence = [];
    score = 0;
    level = 1;
    started = true;

    document.getElementById("level-title").textContent = "Game On!";
    toggleUIBasedOnMode();
    updateScore(score);
    updateLevel(level);

    // Start the first sequence after a short delay
    setTimeout(() => {
        console.log("Starting next sequence...");
        nextSequence();
    }, 1000);
}

// Function to generate the next sequence
function nextSequence() {
    console.log("Next sequence...");
    userSequence = [];
    
    // Increment level only after the first sequence
    if (gameSequence.length > 0) {
        level++;
    }
    
    
    // Update score or level based on the current mode
    if (getCurrentMode() === "highScore") {
        updateScore(score);
    } else if (getCurrentMode() === "levels") {
        // Check for win condition in levels mode
        if (level > levelLimit) {
            winning();
            document.getElementById("level-title").textContent = "You Win! Press Start to Play Again.";
            started = false;
            return;
        }
        updateLevel(level);
    }

    // Generate a random color and add it to the game sequence
    let randomColor = colors[Math.floor(Math.random() * colors.length)];
    gameSequence.push(randomColor);
    console.log("Playing sequence:", gameSequence);
    playSequence();
}

// Function to play the generated sequence
function playSequence() {
    console.log("Playing the sequence...");
    sequencePlaying = true; // Set the flag to indicate the sequence is playing
    document.querySelectorAll(".simon-btn").forEach(button => {
        button.disabled = true; // Disable buttons during sequence playback
    });

    // Animate each color in the sequence
    gameSequence.forEach((color, index) => {
        setTimeout(() => {
            console.log("Animating color:", color);
            animateButton(color);
            playSound(color);
        }, 800 * index); // Delay for each color in the sequence
    });

    // Re-enable buttons after the sequence is done
    setTimeout(() => {
        sequencePlaying = false;
        document.querySelectorAll(".simon-btn").forEach(button => {
            button.disabled = false; // Enable buttons after sequence playback
        });
    }, 800 * gameSequence.length);
}

// Function to handle user clicks on buttons
export function handleUserClick(event) {
    if (!started || sequencePlaying) return; // Prevent clicks if the game hasn't started or if the sequence is playing
    
    let clickedColor = event.target.id; // Get the color of the clicked button
    userSequence.push(clickedColor); // Add the clicked color to the user's sequence
    animateButton(clickedColor);
    playSound(clickedColor);
    
    checkAnswer(userSequence.length - 1); // Check the user's answer
}

// Function to check the user's answer against the game sequence
function checkAnswer(currentIndex) {
    // Check if the user's input don't match the game sequence
    if (userSequence[currentIndex] !== gameSequence[currentIndex]) {
        gameSequence = []; // Reset the game sequence
        sequencePlaying = false; // Reset the sequence playing flag
        updateHighScore(score); // Update high score
        showGameOver(); // Show game over screen
         // Add flash effect
        const flashOverlay = document.querySelector('.lose-flash');
        flashOverlay.style.display = 'block';
    
        // Remove flash effect after animation
         setTimeout(() => {
            flashOverlay.style.display = 'none';
             }, 500);
        started = false; // Set game state to not started
        return;
    }
    
    // Check if the user has completed the entire sequence
    if (userSequence.length === gameSequence.length) {
        if (getCurrentMode() === "highScore") {
            score++; // Increment score for high score mode
            updateScore(score); // Update the score display
        } 
        // Proceed to the next sequence after a delay
        setTimeout(nextSequence, 1000);
    }
}

// Function to animate the button when clicked or during the sequence
function animateButton(color) {
    let button = document.getElementById(color);
    button.classList.add("flash"); // Add flash effect
    setTimeout(() => {
        button.classList.remove("flash"); // Remove flash effect after a short duration
    }, 300);
}

// Function to play sound for the given color
function playSound(color) {
    let sound = new Audio(`sounds/${color}.mp3`); // Load the sound file for the color
    sound.play(); // Play the sound
}

// Function to play the winning sound
function winning() {
    const sound = new Audio('sounds/winning.mp3'); // Load the winning sound
    sound.play(); // Play the winning sound
         // Add flash effect
         const flashOverlay = document.querySelector('.win-flash');
         flashOverlay.style.display = 'block';
         // Remove flash effect after animation
          setTimeout(() => {
             flashOverlay.style.display = 'none';
              }, 500);
}

